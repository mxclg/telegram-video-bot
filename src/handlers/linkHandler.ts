import { Context } from "telegraf";
import { exec } from "child_process";
import path from "path";
import fs from "fs";

export const linkHandler = async (ctx: Context) => {
  if (!ctx.message || !("text" in ctx.message)) {
    await ctx.reply("–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    return;
  }

  const message = ctx.message.text;

  if (message.startsWith("https://")) {
    const videoUrl = message;
    await ctx.reply("–°–µ–π—á–∞—Å —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ‚Ä¶");

    const videoTimeStamp = new Date()
      .toISOString()
      .replace(/[^a-zA-Z0-9]/g, "");
    const videoName = `video_${videoTimeStamp}.mp4`;
    const filePath = path.join("/tmp", videoName);

    exec(`yt-dlp -o "${filePath}" "${videoUrl}"`, async (err) => {
      if (err) {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ üò¢");
        return;
      }

      try {
        await ctx.replyWithVideo({ source: filePath });
      } catch {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.");
      } finally {
        fs.unlink(filePath, () => {});
      }
    });
  } else {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.");
  }
};
